(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{123:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return createSoundManagerStateUpdateAction}));var _ActionTypes__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(45);const createSoundManagerStateUpdateAction=value=>Object.freeze({type:_ActionTypes__WEBPACK_IMPORTED_MODULE_0__.a.SoundManagerStateUpdate,value:value})},428:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return initialization})),__webpack_require__.d(__webpack_exports__,"logSoundManagerPreloadMetadata",(function(){return logSoundManagerPreloadMetadata})),__webpack_require__.d(__webpack_exports__,"logImageManagerPreloadMetadata",(function(){return logImageManagerPreloadMetadata}));var regenerator=__webpack_require__(75),regenerator_default=__webpack_require__.n(regenerator),tslib_es6=__webpack_require__(36),ActionTypes=__webpack_require__(45);var isInDebugMode=__webpack_require__(53),LoadingScreen=__webpack_require__(249),MediaPreloadStrategies=__webpack_require__(40),createSoundManagerStateUpdateAction=__webpack_require__(123);const populateSoundManagerStateToRedux=({collection:{groups:groups}},{dispatch:dispatch,getState:getState,subscribe:subscribe})=>{const unsubscribe=subscribe(()=>{const _getState=getState(),currentState=_getState.soundManagerState,soundsLoaded=_getState.soundsLoaded,storyLoaded=_getState.storyLoaded;if(!soundsLoaded||!storyLoaded)return;unsubscribe();const soundManagerState=Object.assign({},currentState);Object.keys(groups).sort().reverse().forEach(groupName=>{const group=groups[groupName];soundManagerState.groups=Object.assign(Object.assign({},soundManagerState.groups),{[groupName]:{groupName:groupName,label:group.getLabel(),volume:group.getVolume()}}),Object.keys(group.sounds).sort().forEach(soundName=>{const _group$getSound=group.getSound(soundName),getFade=_group$getSound.getFade,getLabel=_group$getSound.getLabel,getLoop=_group$getSound.getLoop,getVolume=_group$getSound.getVolume,isPlaying=_group$getSound.isPlaying;soundManagerState.sounds[soundName]={groupName:groupName,soundName:soundName,fade:getFade(),label:getLabel(),loop:getLoop(),playing:isPlaying(),startedTime:0,volume:getVolume()}})}),dispatch(Object(createSoundManagerStateUpdateAction.a)(soundManagerState))})};function initialization({addProgressTicks:addProgressTicks,beginLoad:beginLoad,config:config,config:{debug:debug,loggers:{log:log,warn:warn},publicUrl:publicUrl},imagesToPreload:imagesToPreload,loadSoundGroups:loadSoundGroups,preloadImages:preloadImages,soundGroups:soundGroups,soundManager:soundManager,store:store,store:{dispatch:dispatch},updateDescription:updateDescription}){return Object(tslib_es6.a)(this,void 0,void 0,regenerator_default.a.mark((function _callee2(){var progressMax,soundNamesToPreload,nonCriticalSoundNames,opts,soundPreloadPromises;return regenerator_default.a.wrap((function(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:return progressMax=0,soundNamesToPreload=[],nonCriticalSoundNames=[],Object.keys(soundGroups).forEach(groupKey=>{Object.keys(soundGroups[groupKey].sounds).forEach(soundKey=>{!0===soundGroups[groupKey].sounds[soundKey].preload?soundNamesToPreload.push([groupKey,soundKey]):nonCriticalSoundNames.push([groupKey,soundKey])})}),progressMax+=soundNamesToPreload.length,Object.keys(imagesToPreload).forEach(imageKey=>{imagesToPreload[imageKey].preloadStrategy===MediaPreloadStrategies.a.PreloadDeferred&&(progressMax+=1)}),"Loading assets...",opts={component:LoadingScreen.a,config:config,initialDescription:"Loading assets...",progressMax:progressMax},beginLoad(opts),soundPreloadPromises=[],_context2.next=12,new Promise((resolve,reject)=>Object(tslib_es6.a)(this,void 0,void 0,regenerator_default.a.mark((function _callee(){return regenerator_default.a.wrap((function(_context){for(;;)switch(_context.prev=_context.next){case 0:return setTimeout(()=>{(soundPreloadPromises=loadSoundGroups(soundNamesToPreload,nonCriticalSoundNames)).forEach(prom=>{prom.then(({getLabel:getLabel})=>{const newDesc='The sound "'.concat(getLabel().title||"No title provided",'" is now loaded.');updateDescription(newDesc)},err=>{warn("A sound failed to load."),warn(err)})}),Promise.all(soundPreloadPromises).then(resolve,reject)},200),soundManager.collection.getAllGroups().forEach(group=>{group.__sounds=Object.keys(group.sounds).reduce((sounds,key)=>Object.assign(Object.assign({},sounds),{[key]:group.sounds[key]}),{})}),_context.next=4,new Promise((resolve,reject)=>{setTimeout(()=>{preloadImages((err,imageName)=>{if(err)return warn(err.toString()),reject(err);addProgressTicks(1),updateDescription('The image "'.concat(imageName,'" is now loaded.'))}).then(resolve,reject)},205)});case 4:return _context.next=6,Promise.all(soundPreloadPromises.flat());case 6:dispatch((value=!0,Object.freeze({type:ActionTypes.a.SoundsLoaded,value:value}))),populateSoundManagerStateToRedux(soundManager,store),Object(isInDebugMode.a)(debug)&&logSoundManagerPreloadMetadata(soundNamesToPreload,soundManager,log);case 9:case"end":return _context.stop()}var value}),_callee)}))));case 12:Object(isInDebugMode.a)(debug)&&logImageManagerPreloadMetadata(Object.values(imagesToPreload),log,publicUrl);case 13:case"end":return _context2.stop()}}),_callee2,this)})))}const logSoundManagerPreloadMetadata=(soundNamesToPreload,soundManager,logFunc)=>{logFunc("---- Sound Manager ----"),logFunc("Sound Manager loaded the following sound files:");logFunc(soundNamesToPreload.map(([groupName,soundName])=>{let outStr='- "'.concat(soundName,'", in group "').concat(groupName,'"');if(soundManager.collection.hasGroup(groupName)){const group=soundManager.collection.getGroup(groupName),groupTitle=group.getLabel().title;if(group.hasSound(soundName)){const soundTitle=group.getSound(soundName).getLabel().title;outStr='- "'.concat(soundTitle||soundName,'", '),outStr+='in group "'.concat(groupTitle||groupName,'"')}}return outStr}).join(",\n\n")),logFunc("--------")},logImageManagerPreloadMetadata=(imagesToPreload,logFunc,publicUrl)=>{logFunc("---- Image Manager ----"),logFunc("Image Manager preloaded the following image files:");logFunc(imagesToPreload.map(({name:imageName,url:url})=>'- "'.concat(imageName,'", from remote source "').concat(url,'"')).join(",\n\n")),logFunc("--------")}}}]);